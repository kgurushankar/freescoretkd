#! /usr/bin/perl
use Try::Tiny;
use JSON::XS;
use List::Util qw( first );
use List::MoreUtils qw( part );
use Data::Dumper;

use lib qw( /usr/local/freescore/lib );
use FreeScore::Forms::FreeStyle;

my $results    = undef;
my $tournament = read_tournament_config();

my @divisions  = ();
my $results    = new FreeScore::Forms::FreeStyle( $tournament->{ db }, 1 );
my $self       = first { $_->{ name } eq 'f022' } @{ $results->{ divisions }};

  my $athletes = $self->{ athletes };
  my $round    = $self->{ round } or return;

  my ($pending, $complete) = part { $athletes->[ $_ ]{ complete }{ $round } ? 1 : 0 } @{ $self->{ order }{ $round }};

  my $placements = [ sort {
    my $i = $athletes->[ $a ];
    my $j = $athletes->[ $b ];

#    $j->{ adjusted }{ $round }{ total  }    <=> $i->{ adjusted }{ $round }{ total  }    || 
#    $j->{ adjusted }{ $round }{ technical } <=> $i->{ adjusted }{ $round }{ technical } || 
#    $j->{ original }{ $round }{ total  }    <=> $i->{ original }{ $round }{ total  }

		printf( "%.2f <=> %.2f: %d\n", $i->{ adjusted }{ $round }{ total },     $j->{ adjusted }{ $round }{ total },     $i->{ adjusted }{ $round }{ total  }     <=> $j->{ adjusted }{ $round }{ total });
		printf( "%.2f <=> %.2f: %d\n", $i->{ adjusted }{ $round }{ technical }, $j->{ adjusted }{ $round }{ technical }, $i->{ adjusted }{ $round }{ technical  } <=> $j->{ adjusted }{ $round }{ technical });

    $j->{ adjusted }{ $round }{ total  }    <=> $i->{ adjusted }{ $round }{ total  }    || 
    $j->{ adjusted }{ $round }{ technical } <=> $i->{ adjusted }{ $round }{ technical } || 
    $j->{ original }{ $round }{ total  }    <=> $i->{ original }{ $round }{ total  }

  } @$complete ];

print Dumper reverse @$placements;

  $self->{ placements } = {} if not exists $self->{ placements };
  $self->{ pending }    = {} if not exists $self->{ pending };

  $self->{ placements }{ $round } = $placements;
  $self->{ pending }{ $round }    = $pending;

# ============================================================
sub read_tournament_config {
# ============================================================
  my $php = '';
  my $config = {
    optscore => '/home/ubuntu/freescore/trunk/frontend/html/include/php/config.php',
    redhat   => '/var/www/html/freescore/include/php/config.php',
    ubuntu   => '/var/www/freescore/include/php/config.php',
    raspbian => '/var/www/html/include/php/config.php',
  };
  foreach $os (keys %$config) { if( -e $config->{ $os } ) { $php = $config->{ $os }; last; } }
  if( ! $php ) { die "Can't find configuration file 'config.php' $!"; }

  my $json = new JSON::XS();
  my $data = `(cat $php; echo '<?php echo \$tournament ?>') | php`;
  my $config = $json->decode( $data );
  return $config;
}

