#! /usr/bin/perl
use Try::Tiny;
use CGI;
use CGI::Carp qw( fatalsToBrowser );
use JSON::XS;
use File::Slurp qw( read_file );
use Data::Dumper;

use lib qw( /usr/local/freescore/lib );
use FreeScore::Forms::WorldClass;

my $cgi        = new CGI();
my $results    = undef;
my $tournament = read_tournament_config();
my $ring       = $cgi->param( 'ring' );
my $divid      = $cgi->param( 'divid' );
my @rounds     = ($cgi->param( 'round' ));
my $json       = new JSON::XS();

print $cgi->header();

my @divisions  = ();
my $results    = undef;
try {
	if( defined $ring ) {
		if( defined $divid ) { 
			$results = new FreeScore::Forms::WorldClass( $tournament->{ db }, $ring );
			push @divisions, grep { $_->{ name } eq $divid } @{ $results->{ divisions }};

		} else {
			$results = new FreeScore::Forms::WorldClass( $tournament->{ db }, $ring );
			push @divisions, @{ $results->{ divisions }};
		}
	} else {
		foreach my $ring ( @{$tournament->{ rings }} ) {
			$results = new FreeScore::Forms::WorldClass( $tournament->{ db }, $ring );
			push @divisions, @{ $results->{ divisions }};
		}
	}
} catch {
	die $_;
	
};
print "<pre>\n";

@divisions = sort { $a->{ name } cmp $b->{ name } } @divisions;

foreach my $division (@divisions) {
	my $name   = uc $division->{ name };
	my $judges = $division->{ judges } || 3;
	@rounds = reverse @FreeScore::Forms::WorldClass::Division::round_order unless @rounds;
	foreach my $round (@rounds) {
		next unless exists $division->{ order }{ $round };
		my $rname  = $FreeScore::Forms::WorldClass::Division::round_name->{ $round };
		my $forms  = $division->{ forms }{ $round };
		my $placed = {};
		my $i      = 0;
		my $places = $division->{ placement }{ $round };
		foreach my $j ( 0 .. $#$places ) {
			my $i = $places->[ $j ];
			$placed->{ $i } = ordinal( $j + 1 );
		}

		my $n = $#{$division->{ order }{ $round }};
		printf( "%s\t%s\t%s\n", $name, $division->{ description }, $round );
		foreach my $i (0 .. $n) {
			my $j       = $division->{ order }{ $round }[ $i ];
			my $athlete = $division->{ athletes }[ $j ];
			my $notes   = $athlete->{ notes } ? $athlete->{ notes } : '';
			my $sum     = 0.0;
			my $n       = 0;
			my $video   = $json->decode( $athlete->{ info }{ video });
			my $uuid    = $video->{ finals }[ 0 ]{ file }; $uuid =~ s/^videos\///; $uuid =~ s/\/finals-0.mp4$//;

			printf( "%d\t%s\t%-40s", ($i + 1),$uuid, $athlete->{ name });
			foreach my $j ( 0 .. 1 ) {
				my $score = $athlete->{ scores }{ $round }{ forms }[ $j ];
				my $mean  = $score->{ adjusted };
				if( defined $mean ) {
					if( $score->{ complete }) { 
						if( exists $score->{ decision } && defined $score->{ decision } && ( $score->{ decision }{ disqualify } || $score->{ decision }{ withdraw })) {
							my $codes = { disqualify => 'DSQ', withdraw => 'WDR' };
							foreach my $decision (keys %$codes) {
								printf( "\t%.2f\t%.2f\t%s ", $mean->{ accuracy }, $mean->{ presentation }, $codes->{ $decision } ) if( $score->{ decision }{ $decision });
							}
						} else {
							printf( "\t%.2f\t%.2f\t%.2f", $mean->{ accuracy }, $mean->{ presentation }, $mean->{ total }); 
						}
						$n++;
					} else { print( "\t-   \t-   \t-   " ); }
				} else {
					print( "\t-   \t-   \t-   " );
				}
				$sum += $mean->{ total };
			}
			$n ||= 1;
			printf( "\t%.3f\t$notes", ($sum/$n), $notes );
			if( exists $placed->{ $j } ) { print "\t$placed->{ $j }"; }
			else { print "\t-"; }
			print "\n";
		}
		print "\n";
	}
}

print <<EOF;
</pre>
EOF

# ============================================================
sub ordinal {
# ============================================================
	my $n = shift;
	my $d = $n % 10;
	if( $n >= 11 && $n <= 13 ) { return $n . 'th'; }
	elsif( $d == 1 )           { return $n . 'st'; }
	elsif( $d == 2 )           { return $n . 'nd'; }
	elsif( $d == 3 )           { return $n . 'rd'; }
	else                       { return $n . 'th'; }
}

# ============================================================
sub read_tournament_config {
# ============================================================
	my $php = '';
	my $config = [
		'/home/ubuntu/freescore/trunk/frontend/html/include/php/config.php',
		'/var/www/html/freescore/include/php/config.php',
		'/var/www/html/include/php/config.php',
		'/var/www/freescore/include/php/config.php',
		'/var/www/include/php/config.php',
	];
	foreach my $file (@$config) { next unless -e $file; $php = $file; last; }
	if( ! $php ) { die "Can't find configuration file 'config.php' $!"; }

	my $json = new JSON::XS();
	my $data = `echo \$(cat $php; echo '<?php echo( \$tournament ); ?>') | php`;
	my $config = $json->decode( $data );

	return $config;
}
