#! /usr/bin/perl
use Try::Tiny;
use CGI;
use CGI::Carp qw( fatalsToBrowser );
use JSON::XS;
use File::Slurp qw( read_file );
use Data::Dumper;

use lib qw( /usr/local/freescore/lib );
use FreeScore::Forms::WorldClass;

my $cgi        = new CGI();
my $results    = undef;
my $tournament = read_tournament_config();
my $ring       = $cgi->param( 'ring' );
my $divid      = $cgi->param( 'divid' );
my $ringcapt   = $cgi->param( 'ringcaptain' );
my @rounds     = ($cgi->param( 'round' ));
my $json       = new JSON::XS();

my @divisions  = ();
my $results    = undef;
try {
	if( defined $ring ) {
		if( defined $divid ) { 
			$results = new FreeScore::Forms::WorldClass( $tournament->{ db }, $ring );
			push @divisions, grep { $_->{ name } eq $divid } @{ $results->{ divisions }};

		} else {
			$results = new FreeScore::Forms::WorldClass( $tournament->{ db }, $ring );
			push @divisions, @{ $results->{ divisions }};
		}
	} else {
		foreach my $ring ( @{$tournament->{ rings }} ) {
			$results = new FreeScore::Forms::WorldClass( $tournament->{ db }, $ring );
			push @divisions, @{ $results->{ divisions }};
		}
	}
} catch {
	die $_;
	
};

@divisions = sort { $a->{ name } cmp $b->{ name } } @divisions;

print $cgi->header();

print <<EOF;
<html>
	<head>
		<title>World Class Forms Division Draws</title>
		<style type="text/css">
			body {
				font-family: Optima;
			}
			.division {
				clear: both;
				margin-top: 28px;
				width: 920px;
				height: 20px;
			}
			.division .description {
				float: left;
			}
			.division .round {
				float: right;
			}
			.results {
				page-break-inside: avoid;
				page-break-after: always;
			}
			.results table {
				page-break-inside: avoid;
				width: 920px;
			}
			.results th {
				margin-top: 8px;
				border-top: 1px solid #999;
				border-bottom: 1px solid #999;
				padding: 0 4px 0 4px;
				text-align: left;
			}
			.results td         { padding: 2px 4px 2px 4px; page-break-inside: avoid; }
			.results td.number    { width: 32px; }
			.results td.usat      { width: 80px; }
			.results td.noc       { width: 120px; }
			.results td.athlete   { width: 768px; }
			.results td.decisions { width: 32px; }
			.results td.form,.score,.place { width: 100px; text-align: center; }
			.results td.preacc { font-size: 8pt; }
			.results td.notes  { font-size: 9pt; }
			.results tr:nth-child( even ) { background: #fff; }
			.results tr:nth-child( odd  ) { background: #eee; }
			.results tr:nth-child( even ) td { border-bottom: 1px solid #fff; }
			.results tr:nth-child( odd  ) td { border-bottom: 1px solid #eee; }

			.header, .header-space { height: 180px; }
			.footer, .footer-space { height: 300px; }
			.header { position: fixed; top: 0; }
			.footer { position: fixed; bottom: 0; }

		</style>
	</head>
	<body>
<table>
<thead><tr><td><div class="header-space"> </div></td></tr></thead>
<tbody><tr><td>
EOF

while( @divisions ) {
	my $division = shift @divisions;
	my $matches = [];

	# ===== GROUP MATCHES
	push @$matches, $division;
	while( @divisions ) {
		my $next = $divisions[ 0 ];
		last if( ! exists $division->{ matchdiv });
		last if( ! exists $next->{ matchdiv });
		last if( $next->{ matchdiv } ne $division->{ matchdiv });
		$next = shift @divisions;
		push @$matches, $next;
	}

	print "\n\n<div class=\"results\">\n\n";

	# ===== DRAW BRACKETS
	my $bracket = $division->{ method } eq 'aau-single-cutoff' && $division->{ round } =~ /(?:ro4[ab]|ro2)/;
	if( ! $bracket ) { 
		# Do nothing; don't draw brackets if it's not a bracketed division or round

	} elsif( @$matches == 1 ) {
		my $chung = $matches->[ 0 ]{ athletes }[ 0 ];
		my $hong  = $matches->[ 0 ]{ athletes }[ 1 ];
		$chung = { name => $chung->{ name }, noc => noc( $chung )};
		$hong  = { name => $hong->{ name } || '&nbsp;',  noc => noc( $hong ) || '&nbsp;' };

		print <<EOF;
	<svg width="920" height="44">
		<rect x="140" y="5" width="10" height="34" style="fill:blue;stroke:black;" />
		<rect x="150" y="5" width="240" height="34" style="fill:white;stroke:black;" />
		<rect x="390" y="5" width="50" height="34" style="fill:white;stroke:black;" />
		<text x="160" y="27">$chung->{ name }</text>
		<text x="415" y="27" text-anchor="middle">$chung->{ noc }</text>
		<rect x="730" y="5" width="10" height="34" style="fill:red;stroke:black;" />
		<rect x="490" y="5" width="240" height="34" style="fill:white;stroke:black;" />
		<rect x="440" y="5" width="50" height="34" style="fill:white;stroke:black;" />
		<text x="720" y="27" text-anchor="end">$hong->{ name }</text>
		<text x="465" y="27" text-anchor="middle">$hong->{ noc }</text>
	</svg>
EOF

	} elsif( @$matches == 2 || @$matches == 3 ) {
		my $ro4a = {
			chung => $matches->[ 0 ]{ athletes }[ 0 ],
			hong  => $matches->[ 0 ]{ athletes }[ 1 ],
		};
		my $ro4b = {
			chung => $matches->[ 1 ]{ athletes }[ 0 ],
			hong  => $matches->[ 1 ]{ athletes }[ 1 ],
		};
		my $ro2 = @$matches == 3 ? {
			chung => $matches->[ 2 ]{ athletes }[ 1 ],
			hong  => $matches->[ 2 ]{ athletes }[ 0 ],
		} : {
			chung => { name => '', info => { noc => '' }},
			hong  => { name => '', info => { noc => '' }},
		};

		foreach my $color (qw( chung hong )) {
			$ro4a->{ $color } = { name => $ro4a->{ $color }{ name }, noc => noc( $ro4a->{ $color }) };
			$ro4b->{ $color } = { name => $ro4b->{ $color }{ name }, noc => noc( $ro4b->{ $color }) };
			$ro2->{ $color }  = { name => $ro2->{ $color }{ name }, noc => noc( $ro2->{ $color }) };
		}
		print <<EOF;
	<svg width="920" height="56">
		<rect x="005"   y="05" width="7.5"  height="25.5" style="fill:blue;stroke:black;" />
		<rect x="012.5" y="05" width="170"  height="25.5" style="fill:white;stroke:black;" />
		<rect x="182.5" y="05" width="37.5" height="25.5" style="fill:white;stroke:black;" />
		<text x="020" y="22.5" font-size="15">$ro4a->{ chung }{ name }</text>
		<text x="201.25" y="22.5"  font-size="15"text-anchor="middle">$ro4a->{ chung }{ noc }</text>

		<rect x="005"   y="30.5" width="7.5"  height="25.5" style="fill:red;stroke:black;" />
		<rect x="012.5" y="30.5" width="170"  height="25.5" style="fill:white;stroke:black;" />
		<rect x="182.5" y="30.5" width="37.5" height="25.5" style="fill:white;stroke:black;" />
		<text x="020" y="49" font-size="15">$ro4a->{ hong }{ name }</text>
		<text x="201.25" y="49"  font-size="15" text-anchor="middle">$ro4a->{ hong }{ noc }</text>

		<line x1="220" y1="30.5" x2="240" y2="30.5" stroke="black" />

    <rect x="240"    y="17.75" width="7.5"  height="25.5" style="fill:blue;stroke:black;" />
    <rect x="247.5"  y="17.75" width="170"  height="25.5" style="fill:white;stroke:black;" />
    <rect x="417.5"  y="17.75" width="37.5" height="25.5" style="fill:white;stroke:black;" />
    <text x="255"    y="36.25" font-size="15">$ro2->{ chung }{ name }</text>
    <text x="436.25" y="36.25" font-size="15" text-anchor="middle">$ro2->{ chung }{ noc }</text>

    <rect x="662.5"  y="17.75" width="7.5"  height="25.5" style="fill:red;stroke:black;" />
    <rect x="492.5"  y="17.75" width="170"  height="25.5" style="fill:white;stroke:black;" />
    <rect x="455"    y="17.75" width="37.5" height="25.5" style="fill:white;stroke:black;" />
    <text x="655"    y="36.25" font-size="15" text-anchor="end">$ro2->{ hong }{ name }</text>
    <text x="473.75" y="36.25" font-size="15" text-anchor="middle">$ro2->{ hong }{ noc }</text>

    <line x1="670" y1="30.5" x2="690" y2="30.5" stroke="black" />

    <rect x="897.5"  y="05"    width="7.5"  height="25.5" style="fill:blue;stroke:black;" />
    <rect x="727.5"  y="05"    width="170"  height="25.5" style="fill:white;stroke:black;" />
    <rect x="690"    y="05"    width="37.5" height="25.5" style="fill:white;stroke:black;" />
    <text x="890"    y="22.5"  font-size="15" text-anchor="end">$ro4b->{ chung }{ name }</text>
    <text x="708.75" y="22.5"  font-size="15" text-anchor="middle">$ro4b->{ chung }{ noc }</text>

    <rect x="897.5"  y="30.5"  width="7.5"  height="25.5" style="fill:red;stroke:black;" />
    <rect x="727.5"  y="30.5"  width="170"  height="25.5" style="fill:white;stroke:black;" />
    <rect x="690"    y="30.5"  width="37.5" height="25.5" style="fill:white;stroke:black;" />
    <text x="890"    y="49"    font-size="15" text-anchor="end">$ro4b->{ hong }{ name }</text>
    <text x="708.75" y="49"    font-size="15" text-anchor="middle">$ro4b->{ hong }{ noc }</text>
	</svg>
EOF
	}

	foreach my $division (@$matches) {
		my $matchnum = $division->{ name }; $matchnum =~ s/^m//i;
		my $name     = exists $division->{ matchdiv } ? sprintf( "%s (Match %s)", uc $division->{ matchdiv }, $matchnum) : uc $division->{ name };
		my $judges   = $division->{ judges } || 3;
		my $flight   = $name =~ /([A-Za-z])$/ ? sprintf( " (Group %s)", uc( $1 )) : '';

		@rounds = reverse $division->rounds() unless @rounds;
		foreach my $round (@rounds) {
			next unless exists $division->{ order }{ $round };
			my $rname  = $division->round_name( $round );
			my $forms  = $division->{ forms }{ $round };
			my $placed = {};
			my $i      = 0;
			my $places = $division->{ placement }{ $round };
			foreach my $j ( 0 .. $#$places ) {
				my $i = $places->[ $j ];
				$placed->{ $i } = ordinal( $j + 1 );
			}

			print <<EOF;
			<div class="division"><div class="description"><b>Division $name</b> &mdash; $division->{ description }$flight </div><div class="round"><b>$rname Round</b></div></div>
			<table border=0 cellpadding=0 cellspacing=0>
				<tr>
					<th class="number">#</th>
					<th class="noc">NOC/St./Terr.</th>
					<th class="athlete">Name</th>
					<th class="decisions"></th>
				</tr>
EOF
			my $n = $#{$division->{ order }{ $round }};
			foreach my $i (0 .. $n) {
				my $j        = $division->{ order }{ $round }[ $i ];
				my $athlete  = $division->{ athletes }[ $j ];
				my $notes    = $athlete->{ notes } ? $athlete->{ notes } : '';
				my $noc      = $athlete->{ info }{ noc };
				my $video    = $athlete->{ info }{ video } ? $json->decode( $athlete->{ info }{ video }) : { $round => [{ decision => undef }]};
				my $stream   = $athlete->{ info }{ stream } ? $json->decode( $athlete->{ info }{ stream }) : { decision => undef };
				my $decision = $ringcapt ? ($video->{ $round }[ 0 ]{ decision } || $stream->{ decision }) : '';
				my $sum      = 0.0;
				my $n        = 0;

				$noc = $noc =~ /\// ? uc((split /\//, $noc)[ -1 ]) : uc( $noc );
				print "<tr><td class=\"number\">" . ($i + 1) . ".</td><td class=\"noc\">$noc</td><td class=\"athlete\">$athlete->{ name }</td><td>$decision</td></tr>\n";
			}
			print '</table>';
		}
	}
	print "</div>\n";
}

print <<EOF;
</td></tr></tbody>
<tfoot><tr><td><div class="footer-space"> </div></td></tr></tfoot>
</table>
<div class="header"><img src="/images/branding/header.png" width="100%"></div>
<div class="footer"><img src="/images/branding/footer.png" width="100%"></div>
	</body>
</html>
EOF

# ============================================================
sub ordinal {
# ============================================================
	my $n = shift;
	my $d = $n % 10;
	if( $n >= 11 && $n <= 13 ) { return $n . 'th'; }
	elsif( $d == 1 )           { return $n . 'st'; }
	elsif( $d == 2 )           { return $n . 'nd'; }
	elsif( $d == 3 )           { return $n . 'rd'; }
	else                       { return $n . 'th'; }
}

# ============================================================
sub noc {
# ============================================================
	my $athlete = shift;
	my $noc     = $athlete->{ info }{ noc };
	$noc = $noc =~ /\// ? (split /\//, $noc)[ -1 ] : $noc;
	return uc $noc;
}

# ============================================================
sub read_tournament_config {
# ============================================================
	my $php = '';
	my $config = [
		'/home/ubuntu/freescore/trunk/frontend/html/include/php/config.php',
		'/var/www/html/freescore/include/php/config.php',
		'/var/www/html/include/php/config.php',
		'/var/www/freescore/include/php/config.php',
		'/var/www/include/php/config.php',
	];
	foreach my $file (@$config) { next unless -e $file; $php = $file; last; }
	if( ! $php ) { die "Can't find configuration file 'config.php' $!"; }

	my $json = new JSON::XS();
	my $data = `echo \$(cat $php; echo '<?php echo( \$tournament ); ?>') | php`;
	my $config = $json->decode( $data );

	return $config;
}
